 /**
 * File Name: Code968254.cpp
 * Function: Holds all classes and functions for robot stuff
 * 
 * Author: Kiet Chau
 * Editor: Jakub Fiedorowicz
 * 
 * SVN Repository: https://svn2.dev.vivid-hosting.net/svn/.....(tbd)
 * 
 * This code is confidential and cannot be released or published
 * without explicit permission in writing from the Author.
 * 
 */
#include "RAWCLib.h"
#include "TCS.h"
#include "DriverStationLCD.h"
#include "Timer.h"
#include "AxisCamera.h" 
#include "TrackAPI.h" 
#include <math.h>

#define DEBUG 0

#define AUTON_CASE auton_case_numeric
#define AUTON_TRACK_PINK 1
#define AUTON_CORNER_LEFT 3
#define AUTON_CORNER_RIGHT 4
#define AUTON_SIDE_LEFT 5
#define AUTON_SIDE_RIGHT 6

extern Victor *driveLeftFront;
extern Victor *driveRightFront;
extern Victor *upperConA;
extern Victor *upperConB;
extern Victor *lowerConA;
extern Victor *lowerConB;
extern Victor *shooterA;
extern Victor *shooterB;
extern Gyro *ourGyro;
extern Encoder* l_gearbox_encoder;
extern Encoder* l_follower;
extern Encoder* r_gearbox_encoder;
extern Encoder* r_follower;
extern DigitalInput* teamIdentifier;
extern float l_PID_y, r_PID_y;
extern bool l_TCS_ACTIVE, r_TCS_ACTIVE, printer;
extern float l_realFPS, r_realFPS;
extern float l_currentFPS, r_currentFPS;
extern double printerTimer, lastPrinterTimer;
extern Timer yaccelTimer, accelTimer, l_PID_I_TIMER, r_PID_I_TIMER;
extern int cmdIter;
extern int cmdNum;
float realy, realx;

Joystick* leftJoy;
Joystick* rightJoy;

class Code968254 : public IterativeRobot
{
private:
	DriverStation *ds; 	
	DriverStationLCD *dsLCD;
	TrackingThreshold tdata1; 	// image data for tracking
	TrackingThreshold tdata2; 	// image data for tracking
	int green_lightX, green_lightY;
	int pink_lightX, pink_lightY;
	bool foundLights;
	int auton_case_numeric;
	float y, x;
		
public:
	Code968254(void) {
		GetWatchdog().SetEnabled(false);
				
		printf("Code968254 Constructor Started\n");

		ds = DriverStation::GetInstance();
		dsLCD = DriverStationLCD::GetInstance();
		if(Code1868){
			leftJoy =  new Joystick(1);
			rightJoy =  new Joystick(2);
		}
		if (Code1868){
			driveLeftFront = new Victor(3);
			driveRightFront = new Victor(2);}
		else{
			driveLeftFront = new Victor(4);
			driveRightFront = new Victor(5);}
		if (Code1868){
			lowerConA = new Victor(4);
			upperConA = new Victor(1);
		}else{
			upperConA = new Victor(2);
			upperConB = new Victor(3);
			lowerConA = new Victor(6);
			lowerConB = new Victor(7);
			shooterA = new Victor(1);
			shooterB = new Victor(8);
		}
		
		if (Code1868){
			driveLeftFront->Set(0);
			driveRightFront->Set(0);
			upperConA->Set(0);
			lowerConA->Set(0);
		}else{
			driveLeftFront->Set(0);
			driveRightFront->Set(0);
			upperConA->Set(0);
			upperConB->Set(0);
			lowerConA->Set(0);
			lowerConB->Set(0);
			shooterA->Set(0);
			shooterB->Set(0);
		}
		
		teamIdentifier = new DigitalInput(14);
		
		l_gearbox_encoder = new Encoder(1, 2, false);
		l_follower = new Encoder(5,6, true);
		r_gearbox_encoder = new Encoder(3, 4, true);
		r_follower = new Encoder(7,8, false);
		ourGyro = new Gyro(1);
		ourGyro->SetSensitivity(.005);

		l_gearbox_encoder->Start();
		l_follower->Start();
		r_gearbox_encoder->Start();
		r_follower->Start();	
		ourGyro ->Reset();
		
		// Start the camera.
		if (StartCameraTask(10, 0, k160x120, ROT_0) == -1)
		{
			printf("Camera cannot start!");
		}
		
		/*
		 * These objects hold and call the GetTrackingData
		 * functions to look for green and pink.
		 */
		tdata1 = GetTrackingData(GREEN, PASSIVE_LIGHT);
		tdata2 = GetTrackingData(PINK, PASSIVE_LIGHT);
		y = x = 0;
		    
		TCS::TCSInit();

	//	AUTON_CASE = AUTON_SIDE_LEFT;

		printf("Code968254 Constructor Completed\n");
	}
	void RobotInit(void) {
		if (Code1868){
			if(CORNER_SIDE){
				if(LEFT_RIGHT)
					auton_case_numeric = AUTON_CORNER_LEFT;
				else
					auton_case_numeric = AUTON_CORNER_RIGHT;
			} else {
				if(LEFT_RIGHT)
					auton_case_numeric = AUTON_SIDE_LEFT;
				else
					auton_case_numeric = AUTON_SIDE_RIGHT;
			}
		} else {
			
			if(AUTON_SWITCH)
				auton_case_numeric = AUTON_CORNER_LEFT;
			else
				auton_case_numeric = AUTON_CORNER_RIGHT;
		}
		TCS::TCSReset();

		printToLCD();
	}
	void DisabledInit(void) {
		if (Code1868){
			if(CORNER_SIDE){
				if(LEFT_RIGHT)
					auton_case_numeric = AUTON_CORNER_LEFT;
				else
					auton_case_numeric = AUTON_CORNER_RIGHT;
			} else {
				if(LEFT_RIGHT)
					auton_case_numeric = AUTON_SIDE_LEFT;
				else
					auton_case_numeric = AUTON_SIDE_RIGHT;
			}
			//SetAutoSeq();
		} else {
			if(AUTON_SWITCH){
		
				auton_case_numeric = AUTON_CORNER_LEFT;}
			else{
				auton_case_numeric = AUTON_CORNER_RIGHT;
			//printToLCD();}
		}
		TCS::TCSReset();
	}
	}
	void AutonomousInit(void) {
		printToLCD();

		TCS::TCSReset();
		green_lightX = green_lightY = 0;
		pink_lightX = pink_lightY = 0;
		
		foundLights = false;
	
		RAWCLib::AutoInit();
#if 0
		if (Code1868){
					if(CORNER_SIDE){
						if(LEFT_RIGHT)
							AUTON_CASE = AUTON_CORNER_LEFT;
						else
							AUTON_CASE = AUTON_CORNER_RIGHT;
					} else {
						if(LEFT_RIGHT)
							AUTON_CASE = AUTON_SIDE_LEFT;
						else
							AUTON_CASE = AUTON_SIDE_RIGHT;
					}
		}
#endif
		SetAutoSeq();
	}
	void TeleopInit(void) {
		y = x = 0.0;
		TCS::TCSReset();
		printToLCD();
	}
/********************************** Periodic Routines *************************************/
/*	void DisabledPeriodic(void)  {
	}
	void AutonomousPeriodic(void) {
	}
	void TeleopPeriodic(void) {
	} 
*/
/********************************** Continuous Routines *************************************/

	void DisabledContinuous(void) {
		if (Code1868){
			if (AUTON_VALID){
			if(CORNER_SIDE){
				if(LEFT_RIGHT )
					auton_case_numeric = AUTON_CORNER_LEFT;
				else
					auton_case_numeric = AUTON_CORNER_RIGHT;
			} else {
				if(LEFT_RIGHT)
					auton_case_numeric = AUTON_SIDE_LEFT;
				else
					auton_case_numeric = AUTON_SIDE_RIGHT;
			}
			printToLCD();
			} else {
				printToLCD();
			}
		} else {
			if(AUTON_SWITCH)
				auton_case_numeric = AUTON_CORNER_LEFT;
			else
				auton_case_numeric = AUTON_CORNER_RIGHT;
			
			printToLCD();
		}
	}
	void AutonomousContinuous(void)	{
		printToLCD();
		/*
		 * This creates an object to run a particle
		 * analysis report on data from the camera.
		 */
		//ParticleAnalysisReport par; // particle analysis reports
		
		/*
		 * If the particle analysis shows green, turn it into
		 * values we can use in autonomous tracking
		 */
		/*if (FindColor(GREEN, &par))
		{	
			green_lightX = (int)(par.center_mass_x_normalized);
			green_lightY = (int)(par.center_mass_y_normalized);
		}*/
		/*
		 * If the particle analysis shows pink, turn it into
		 * values we can use in autonomous tracking
		 *//*
		if (FindColor(PINK, &par))
		{	
			pink_lightX = (int)(par.center_mass_x_normalized);
			pink_lightY = (int)(par.center_mass_y_normalized);
		}*/
		
		/*
		 * Find out if the colors are on the same part of
		 * the grid, if so, go after it!!!
		 */
		/*if((green_lightX < (pink_lightX + 0.1)) && (green_lightX > (pink_lightX - 0.1)))
		{
			green_lightX = green_lightX * 1000;
			green_lightY = green_lightY * 1000;
			
			pink_lightX = pink_lightX * 1000;
			pink_lightX = pink_lightY * 1000;
			
			foundLights = true;
		}*/
		
		/*
		 * Execute the autonomous mode passing camera data
		 */
		
		RAWCLib::AutoExecCycle(green_lightX, green_lightY, pink_lightX, pink_lightY, foundLights);
	}

	void TeleopContinuous(void) {
		printToLCD();
		printerTimer = accelTimer.Get();
		Dashboard &dashboard = m_ds->GetDashboardPacker();
				
		//Get and set the temp values for y and x(The Throttle and Steering)
		//y = RAWCLib::LimitOutput(RAWCLib::SignSquare(stick->GetY()));
		//x = RAWCLib::LimitOutput(steering->GetX());
		
		if(Code1868){
			y = leftJoy->GetY();
			x = rightJoy->GetY();
		}
		else{
			y = -1 * RAWCLib::AnalogInScale(ds->GetAnalogIn(1));
			x = RAWCLib::AnalogInScale(ds->GetAnalogIn(2));
		}
		
		if(printerTimer > lastPrinterTimer + 0.1){
			printer = true;
			lastPrinterTimer = printerTimer;
		}else{
			printer = false;
		}

		/**
		 * Calculate the TCS every 0.1 seconds to provide
		 * greater effect when accelerating/attempting to reduce
		 * wheel slip.
		 */
		//y-left, x-right
		
		if (Code1868){
			realy = (y + x)/2.0;
			realx = (x - y);
			TCS::TCSUpdate(realy, realx);
		}else{
			TCS::TCSUpdate(y,x);
		}
		if(DEBUG && printer){
			printf("LEFT: PID: %f, %f\n", l_PID_y, l_PID_I_TIMER.Get());
			printf("RIGHT: PID: %f, %f\n", r_PID_y, r_PID_I_TIMER.Get());	
		}
		if(DEBUG && printer){
			if(PICK_UP_BUTTON){
				printf("Pick up\n");
			}else if(SHOOT_BUTTON){
				printf("Shoot\n");
			}else if(UN_JAM_BUTTON){
				printf("unjam\n");
			}else if(EXHAUST_BUTTON){
				printf("spit out\n");
			}else{
				printf("Nothing\n");
			}
			printf("Other Options: Shooter Roller: %c, TCS on: %c\n", SHOOTER_SWITCH, TCS_TOGGLE_SWITCH);
		}
		if(Code1868){
			if(!ds->GetDigitalIn(2)){//spit out
				lowerConA->Set(-1);
			}else if(!ds->GetDigitalIn(6)){//suck balls in 
				lowerConA->Set(1);
			}else{
				lowerConA->Set(0);
			}
			if(!ds->GetDigitalIn(1)){//unjam
				upperConA->Set(1);
			}else if(!ds->GetDigitalIn(4)){//score
				upperConA->Set(-1);
			}else
				upperConA->Set(0);
		}else{
			if(SHOOT_BUTTON){
				upperConA->Set(1);
				upperConB->Set(1);
				lowerConA->Set(1);
				lowerConB->Set(1);
			}else if(PICK_UP_BUTTON){
				upperConA->Set(-1);
				upperConB->Set(-1);
				lowerConA->Set(1);
				lowerConB->Set(1);
			}else if(UN_JAM_BUTTON){
				upperConA->Set(-1);
				upperConB->Set(-1);
				lowerConA->Set(0);
				lowerConB->Set(0);
				shooterA->Set(1);
				shooterB->Set(-1);
			}else if(EXHAUST_BUTTON){
				upperConA->Set(-1);
				upperConB->Set(-1);
				lowerConA->Set(-1);
				lowerConB->Set(-1);
			}else{
				upperConA->Set(0);
				upperConB->Set(0);
				lowerConA->Set(0);
				lowerConB->Set(0);
			}
			if(SHOOTER_SWITCH){
				shooterA->Set(-1);
				shooterB->Set(1);
				if(SHOOT_BUTTON){
					upperConA->Set(1);
					upperConB->Set(1);
					lowerConA->Set(1);
					lowerConB->Set(1);
				} 
			}else{
				shooterA->Set(0);
				shooterB->Set(0); 
			}
		}
		if(DEBUG && printer){
			if (printer)
				printf("Y: %f, X: %f\n", y, x);
		}	
		
		y = RAWCLib::LimitOutput(RAWCLib::SignSquare(y));
		x = RAWCLib::LimitOutput(x);
				
		//If the joystick is centered, reset the timer object
		if(y == 0)
		{
			yaccelTimer.Reset();
		}

		//Move the throttle lever thing to the + position to activate TCS
		//if(stick->GetThrottle() < 0)
		float left = 0;
		float right = 0;
		if(TCS_TOGGLE_SWITCH)
		{
			if(DEBUG && printer)
					printf("tcs ENABLED\n");
			y = RAWCLib::LimitOutput((y*RAWCLib::LimitOutput(yaccelTimer.Get() *1.8)));
			//y = RAWCLib::LimitOutput(y + (PID_y*1.2));
		}
		else
		{
			y = RAWCLib::LimitOutput(y);
			l_PID_y = r_PID_y = 0;
		}
		
		//Figure out the "mixed" steering and throttle to run Tank drive
		left = RAWCLib::LimitOutput(x);
		right = RAWCLib::LimitOutput(x);
		/*
		if((x>0) && (y==0)){
			right = 0;
		}else if((x<0)&& (y==0)){
			left = 0;
		}*/
		if (Code1868){
			left = leftJoy->GetY() + (l_PID_y * 0.8);
			left = left * -1;
			right = rightJoy->GetY() + (r_PID_y * 0.8);
		}else{
			left = left - (y + (l_PID_y*1.2));
			right = right + (y + (r_PID_y*1.2));
		}
		left = RAWCLib::LimitOutput(left);
		right = RAWCLib::LimitOutput(right);
		
		if(DEBUG && printer)
			printf("Left drive: %f, Right drive: %f\n", left, right);
		
		//Finally, send out the values to the speed controllers
		driveLeftFront->Set(left);
		driveRightFront->Set(right);	
		
		//batteryVoltage = new AnalogChannel(8);
					
		//printf("%f\n", );
		//printf("bv: %f\n", batteryVoltage->GetVoltage());
		float battVoltage = m_ds->GetBatteryVoltage();
		//printf("%d, %d, %d, %d, %d\n", m_ds->GetDigitalIn(1), m_ds->GetDigitalIn(2), m_ds->GetDigitalIn(3), m_ds->GetDigitalIn(4), m_ds->GetDigitalIn(5));
		//printf("PACK%d,%f,%f", TCS_ACTIVE, y, realFPS);
		//printf("%f,%fCLOSE\n", PID_y, battVoltage);
		dashboard.Printf("PACK%d,%d,%f,%f,%f,%f,%f,%fCLOSE", l_TCS_ACTIVE, r_TCS_ACTIVE, y, l_realFPS, r_realFPS, l_PID_y, r_PID_y, battVoltage);
		dashboard.Finalize();
		printToLCD();
	}
	void printToLCD(void){
		if(!teamIdentifier->Get())
		{
			dsLCD->Printf(DriverStationLCD::kMain_Line6, 1, "JOHNNY 9, TERRORIZE");
			dsLCD->Printf(DriverStationLCD::kUser_Line2, 1, "JOHNNY 9, TERRORIZE");
		}
		else
		{
			if (Code1868){
				dsLCD->Printf(DriverStationLCD::kMain_Line6, 1, "Cookies, mmm tasty");
				dsLCD->Printf(DriverStationLCD::kUser_Line2, 1, "Cookies, mmm tasty");
			}else{
				dsLCD->Printf(DriverStationLCD::kMain_Line6, 1, "DEVASTATOR, TERRORIZE");
				dsLCD->Printf(DriverStationLCD::kUser_Line2, 1, "DEVASTATOR, TERRORIZE");
			}
		}
		if(Code1868){
			//dsLCD->Printf(DriverStationLCD::kUser_Line3, 1, "X: %1.2f Y: %1.2f", realx, realy);
			//const char *lr = ( LEFT_RIGHT ? "LEFT " : "RIGHT" );
			//const char *cs = ( CORNER_SIDE ? "CORNER" : "SIDE  " );
			//dsLCD->Printf(DriverStationLCD::kMain_Line6, 1, "Auto: %s %s", cs, lr  );
			
			dsLCD->Printf(DriverStationLCD::kMain_Line6, 1, "cmdIter %d, cmdNum %d", cmdIter, cmdNum);
			switch(AUTON_CASE){
				case (AUTON_CORNER_RIGHT):
					dsLCD->Printf(DriverStationLCD::kMain_Line6, 20, ":cr");
					break;
				case (AUTON_CORNER_LEFT):
					dsLCD->Printf(DriverStationLCD::kMain_Line6, 20, ":cl");
					break;
				case (AUTON_SIDE_RIGHT):
					dsLCD->Printf(DriverStationLCD::kMain_Line6, 20, ":sr");
					break;
				case (AUTON_SIDE_LEFT):
					dsLCD->Printf(DriverStationLCD::kMain_Line6, 20, ":sl");
					break;
				default:
					dsLCD->Printf(DriverStationLCD::kMain_Line6, 20, ":n");
					break;
			}
			
		}else{
			switch(AUTON_CASE){
				case (AUTON_TRACK_PINK):
					dsLCD->Printf(DriverStationLCD::kUser_Line3, 1, "Auto: Track Pink");
					break;
				case (AUTON_CORNER_LEFT):
					dsLCD->Printf(DriverStationLCD::kUser_Line3, 1, "Auto: Cor-Left");
					break;
				case (AUTON_CORNER_RIGHT):
					dsLCD->Printf(DriverStationLCD::kUser_Line3, 1, "Auto: Cor-Right");
					break;
				default:
					dsLCD->Printf(DriverStationLCD::kUser_Line3, 1, "Auto: NONE");
					break;
			}
		}
		dsLCD->Printf(DriverStationLCD::kUser_Line4, 1, "L: %0.2f, %0.2f", l_realFPS, l_currentFPS);
		dsLCD->Printf(DriverStationLCD::kUser_Line5, 1, "R: %0.2f, %0.2f", r_realFPS, r_currentFPS);
						
		if(TCS_TOGGLE_SWITCH)
			dsLCD->Printf(DriverStationLCD::kUser_Line6, 1, " TCS:  ENABLED");
		else
			dsLCD->Printf(DriverStationLCD::kUser_Line6, 1, " TCS: DISABLED");
		dsLCD->UpdateLCD();
	}
	void SetAutoSeq(void)
	{
		if (Code1868){
			RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 0.5);//foward
			RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 1); //turn left
			RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.3); //foward
			RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 1, 1); //turn right
			//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.4); //foward
			//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 1); //turn right
			//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 60); //stop
			//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -1, 0, 60); //stop
#if 0
			switch(AUTON_CASE){
				case (AUTON_CORNER_RIGHT):
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 0.5); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 1, 1.6); //turn right
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.4); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 1); //turn left
					//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 60); //stop
					break;
				case (AUTON_CORNER_LEFT):
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 0.5);//foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 1); //turn left
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.3); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 1, 1); //turn right
					//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 60); //stop
					break;
				case (AUTON_SIDE_RIGHT):
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 0.5); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 1, 1.2); //turn right
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.2); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 1); //turn left
					//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 60); //stop
					//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -1, 0, 60); //stop
					break;
				case (AUTON_SIDE_LEFT):
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 0.5); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 1.2); //turn left
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.2); //foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25,  1, 1); //turn right
					//RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 60); //stop
					break;
				case (SIDE_RUN_AMUCK)
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2.3);
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 15);
					break;
				case (CORNER_RUN_AMUCK)
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 3)
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 14);
					break;
				case (RIGHT_EMPTY_CELL)
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, -1, 0.75)//turn right
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 2)//foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, -0.25, 1, 1)//turn left
					RAWCLib::AtuoAddSeq(DRIVE_USING_VALUES, -0.25, 0, 1.5)//foward
				//set rollers to collect(lower Con A)-in RAWCLib.cpp
				case (LEFT_EMPTY_CELL)
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES) -0.25, 1, 0.75)//turn left
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES) -0.25, 0, 2)//foward
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES) -0.25, -1, 1)//turn right
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES) -0.25, 0, 3)//foward
				//set rollers to collect(lower Con A)-in RAWCLib.cpp
				case (SIDE_EMPTY_CELL)
					//end up hitting opponent head on
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES) -0.25, 0, 16)//foward
				default:
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 3); //foward--stop
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, 60); //quick turn--stop
					break;
			}
#endif
		}else{
			switch(AUTON_CASE){
				case (AUTON_TRACK_PINK):
					RAWCLib::AutoAddSeq(CAMERA_FIND_PINK, 0, 0, 100);
					break;
				case (AUTON_CORNER_LEFT):
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, .05);
					RAWCLib::AutoAddSeq(TURN_BY_ANGLE, 0, 0, -60);
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, .05);
					RAWCLib::AutoAddSeq(DRIVE_BY_DISTANCE, -1, .05, 6);
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 1, 1, 60); //stop
					break;
				case (AUTON_CORNER_RIGHT):
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, .05);
					RAWCLib::AutoAddSeq(TURN_BY_ANGLE, 0, 0, 60);
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 0, 0, .05);
					RAWCLib::AutoAddSeq(DRIVE_BY_DISTANCE, -1, .05, 6);
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 1, 1, 60); //stop
					break;
				default: 
					RAWCLib::AutoAddSeq(DRIVE_USING_VALUES, 1, 1, 20);
					break;
			}
		}
	}


};
START_ROBOT_CLASS(Code968254);
